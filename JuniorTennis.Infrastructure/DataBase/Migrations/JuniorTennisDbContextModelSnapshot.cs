// <auto-generated />
using System;
using JuniorTennis.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace JuniorTennis.Infrastructure.DataBase.Migrations
{
    [DbContext(typeof(JuniorTennisDbContext))]
    partial class JuniorTennisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("JuniorTennis.Domain.Accounts.AuthorizationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AuthorizationCode")
                        .HasColumnName("authorization_code")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnName("registration_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UniqueKey")
                        .HasColumnName("unique_key")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("authorization_links");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Announcements.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnnounceTitle")
                        .HasColumnName("announce_title")
                        .HasColumnType("text");

                    b.Property<int?>("AnnouncementGenre")
                        .HasColumnName("announcement_genre")
                        .HasColumnType("integer");

                    b.Property<string>("AttachedFilePath")
                        .HasColumnName("attached_file_path")
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .HasColumnName("body")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnName("deleted_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnName("registered_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BlockNumber")
                        .HasColumnName("block_number")
                        .HasColumnType("integer");

                    b.Property<int>("DrawSettingsId")
                        .HasColumnName("draw_settings_id")
                        .HasColumnType("integer");

                    b.Property<int>("DrawTableId")
                        .HasColumnName("draw_table_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("GameDate")
                        .HasColumnName("game_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ParticipationClassification")
                        .HasColumnName("participation_classification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrawSettingsId");

                    b.HasIndex("DrawTableId");

                    b.ToTable("blocks");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.DrawSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("NumberOfBlocks")
                        .HasColumnName("number_of_blocks")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfDraws")
                        .HasColumnName("number_of_draws")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfEntries")
                        .HasColumnName("number_of_entries")
                        .HasColumnType("integer");

                    b.Property<int?>("NumberOfWinners")
                        .HasColumnName("number_of_winners")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentGrade")
                        .HasColumnName("tournament_grade")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("draw_settings");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.DrawTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EditStatus")
                        .HasColumnName("edit_status")
                        .HasColumnType("integer");

                    b.Property<int?>("EligiblePlayersType")
                        .HasColumnName("eligible_players_type")
                        .HasColumnType("integer");

                    b.Property<int>("MainDrawSettingsId")
                        .HasColumnName("main_draw_settings_id")
                        .HasColumnType("integer");

                    b.Property<int>("QualifyingDrawSettingsId")
                        .HasColumnName("qualifying_draw_settings_id")
                        .HasColumnType("integer");

                    b.Property<string>("TennisEventId")
                        .HasColumnName("tennis_event_id")
                        .HasColumnType("text");

                    b.Property<int?>("TournamentFormat")
                        .HasColumnName("tournament_format")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentId")
                        .HasColumnName("tournament_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainDrawSettingsId");

                    b.HasIndex("QualifyingDrawSettingsId");

                    b.ToTable("draw_tables");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BlockId")
                        .HasColumnName("block_id")
                        .HasColumnType("integer");

                    b.Property<int>("DrawSettingsId")
                        .HasColumnName("draw_settings_id")
                        .HasColumnType("integer");

                    b.Property<int?>("GameNumber")
                        .HasColumnName("game_number")
                        .HasColumnType("integer");

                    b.Property<int?>("RoundNumber")
                        .HasColumnName("round_number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("DrawSettingsId");

                    b.ToTable("games");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.GameResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EntryNumberOfWinner")
                        .HasColumnName("entry_number_of_winner")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("GameScore")
                        .HasColumnName("game_score")
                        .HasColumnType("text");

                    b.Property<int?>("GameStatus")
                        .HasColumnName("game_status")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerClassificationOfWinner")
                        .HasColumnName("player_classification_of_winner")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("game_results");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.Opponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignOrder")
                        .HasColumnName("assign_order")
                        .HasColumnType("integer");

                    b.Property<int?>("BlockNumber")
                        .HasColumnName("block_number")
                        .HasColumnType("integer");

                    b.Property<int?>("DrawNumber")
                        .HasColumnName("draw_number")
                        .HasColumnType("integer");

                    b.Property<int?>("EntryNumber")
                        .HasColumnName("entry_number")
                        .HasColumnType("integer");

                    b.Property<int?>("FramePlayerClassification")
                        .HasColumnName("frame_player_classification")
                        .HasColumnType("integer");

                    b.Property<int?>("FromGameNumber")
                        .HasColumnName("from_game_number")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnName("game_id")
                        .HasColumnType("integer");

                    b.Property<int?>("GameNumber")
                        .HasColumnName("game_number")
                        .HasColumnType("integer");

                    b.Property<bool>("IsManuallyAssigned")
                        .HasColumnName("is_manually_assigned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManuallySettingFrame")
                        .HasColumnName("is_manually_setting_frame")
                        .HasColumnType("boolean");

                    b.Property<int?>("PlayerClassification")
                        .HasColumnName("player_classification")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerCodes")
                        .HasColumnName("player_codes")
                        .HasColumnType("text");

                    b.Property<string>("PlayerNames")
                        .HasColumnName("player_names")
                        .HasColumnType("text");

                    b.Property<int?>("SeedLevel")
                        .HasColumnName("seed_level")
                        .HasColumnType("integer");

                    b.Property<int?>("SeedNumber")
                        .HasColumnName("seed_number")
                        .HasColumnType("integer");

                    b.Property<string>("TeamAbbreviatedNames")
                        .HasColumnName("team_abbreviated_names")
                        .HasColumnType("text");

                    b.Property<string>("TeamCodes")
                        .HasColumnName("team_codes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("opponents");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Operators.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address")
                        .HasColumnType("text");

                    b.Property<string>("LoginId")
                        .HasColumnName("login_id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("operators");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Category")
                        .HasColumnName("category")
                        .HasColumnType("integer");

                    b.Property<int?>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerCode")
                        .HasColumnName("player_code")
                        .HasColumnType("text");

                    b.Property<string>("PlayerFamilyName")
                        .HasColumnName("player_family_name")
                        .HasColumnType("text");

                    b.Property<string>("PlayerFamilyNameKana")
                        .HasColumnName("player_family_name_kana")
                        .HasColumnType("text");

                    b.Property<string>("PlayerFirstName")
                        .HasColumnName("player_first_name")
                        .HasColumnType("text");

                    b.Property<string>("PlayerFirstNameKana")
                        .HasColumnName("player_first_name_kana")
                        .HasColumnType("text");

                    b.Property<string>("PlayerJpin")
                        .HasColumnName("player_jpin")
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("integer");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnName("telephone_number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("players");
                });

            modelBuilder.Entity("JuniorTennis.Domain.RequestPlayers.RequestPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnName("approve_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ApproveState")
                        .HasColumnName("approve_state")
                        .HasColumnType("integer");

                    b.Property<int?>("Category")
                        .HasColumnName("category")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerRegistrationFee")
                        .HasColumnName("player_registration_fee")
                        .HasColumnType("integer");

                    b.Property<int?>("RequestType")
                        .HasColumnName("request_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnName("requested_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ReservationBranchNumber")
                        .HasColumnName("reservation_branch_number")
                        .HasColumnType("integer");

                    b.Property<string>("ReservationNumber")
                        .HasColumnName("reservation_number")
                        .HasColumnType("text");

                    b.Property<int>("SeasonId")
                        .HasColumnName("season_id")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("request_players");
                });

            modelBuilder.Entity("JuniorTennis.Domain.RequestTeams.RequestTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("ApproveDateTime")
                        .HasColumnName("approve_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ApproveState")
                        .HasColumnName("approve_state")
                        .HasColumnType("integer");

                    b.Property<int?>("MailState")
                        .HasColumnName("mail_state")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnName("requested_date_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RequestedFee")
                        .HasColumnName("requested_fee")
                        .HasColumnType("integer");

                    b.Property<string>("ReservationNumber")
                        .HasColumnName("reservation_number")
                        .HasColumnType("text");

                    b.Property<int>("SeasonId")
                        .HasColumnName("season_id")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("request_teams");
                });

            modelBuilder.Entity("JuniorTennis.Domain.ReservationNumbers.ReservationNumber", b =>
                {
                    b.Property<DateTime>("RegistratedDate")
                        .HasColumnName("registrated_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SerialNumber")
                        .HasColumnName("serial_number")
                        .HasColumnType("integer");

                    b.HasKey("RegistratedDate", "SerialNumber");

                    b.ToTable("reservation_numbers");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Seasons.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("FromDate")
                        .HasColumnName("from_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("PlayerRegistrationFee")
                        .HasColumnName("player_registration_fee")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerTradeFee")
                        .HasColumnName("player_trade_fee")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistrationFromDate")
                        .HasColumnName("registration_from_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("TeamRegistrationFee")
                        .HasColumnName("team_registration_fee")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ToDate")
                        .HasColumnName("to_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Teams.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<string>("CoachEmailAddress")
                        .HasColumnName("coach_email_address")
                        .HasColumnType("text");

                    b.Property<string>("CoachName")
                        .HasColumnName("coach_name")
                        .HasColumnType("text");

                    b.Property<string>("RepresentativeEmailAddress")
                        .HasColumnName("representative_email_address")
                        .HasColumnType("text");

                    b.Property<string>("RepresentativeName")
                        .HasColumnName("representative_name")
                        .HasColumnType("text");

                    b.Property<string>("TeamAbbreviatedName")
                        .HasColumnName("team_abbreviated_name")
                        .HasColumnType("text");

                    b.Property<string>("TeamCode")
                        .HasColumnName("team_code")
                        .HasColumnType("text");

                    b.Property<string>("TeamJpin")
                        .HasColumnName("team_jpin")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .HasColumnName("team_name")
                        .HasColumnType("text");

                    b.Property<int?>("TeamType")
                        .HasColumnName("team_type")
                        .HasColumnType("integer");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnName("telephone_number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("JuniorTennis.Domain.TournamentEntries.EntryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BlockNumber")
                        .HasColumnName("block_number")
                        .HasColumnType("integer");

                    b.Property<string>("CanParticipationDates")
                        .HasColumnName("can_participation_dates")
                        .HasColumnType("text");

                    b.Property<int?>("DrawTableId")
                        .HasColumnName("draw_table_id")
                        .HasColumnType("integer");

                    b.Property<int?>("EntryNumber")
                        .HasColumnName("entry_number")
                        .HasColumnType("integer");

                    b.Property<bool>("FromQualifying")
                        .HasColumnName("from_qualifying")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParticipationClassification")
                        .HasColumnName("participation_classification")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiptStatus")
                        .HasColumnName("receipt_status")
                        .HasColumnType("integer");

                    b.Property<int?>("SeedNumber")
                        .HasColumnName("seed_number")
                        .HasColumnType("integer");

                    b.Property<int?>("TournamentEntryId")
                        .HasColumnName("tournament_entry_id")
                        .HasColumnType("integer");

                    b.Property<int?>("UsageFeatures")
                        .HasColumnName("usage_features")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrawTableId");

                    b.HasIndex("TournamentEntryId")
                        .IsUnique();

                    b.ToTable("entry_details");
                });

            modelBuilder.Entity("JuniorTennis.Domain.TournamentEntries.EntryPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EntryDetailId")
                        .HasColumnName("entry_detail_id")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerCode")
                        .HasColumnName("player_code")
                        .HasColumnType("text");

                    b.Property<string>("PlayerFamilyName")
                        .HasColumnName("player_family_name")
                        .HasColumnType("text");

                    b.Property<string>("PlayerFirstName")
                        .HasColumnName("player_first_name")
                        .HasColumnType("text");

                    b.Property<int?>("Point")
                        .HasColumnName("point")
                        .HasColumnType("integer");

                    b.Property<string>("TeamAbbreviatedName")
                        .HasColumnName("team_abbreviated_name")
                        .HasColumnType("text");

                    b.Property<string>("TeamCode")
                        .HasColumnName("team_code")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .HasColumnName("team_name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryDetailId");

                    b.ToTable("entry_players");
                });

            modelBuilder.Entity("JuniorTennis.Domain.TournamentEntries.TournamentEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Applicant")
                        .HasColumnName("applicant")
                        .HasColumnType("integer");

                    b.Property<int?>("EntryFee")
                        .HasColumnName("entry_fee")
                        .HasColumnType("integer");

                    b.Property<int?>("ReceiptStatus")
                        .HasColumnName("receipt_status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnName("received_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnName("reservation_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReservationNumber")
                        .HasColumnName("reservation_number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tournament_entry");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Tournaments.HoldingDate", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnName("tournament_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Value")
                        .HasColumnName("holding_date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TournamentId", "Value");

                    b.ToTable("holding_dates");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Tournaments.TennisEvent", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnName("tournament_id")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnName("category")
                        .HasColumnType("integer");

                    b.Property<int>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("integer");

                    b.Property<int>("Format")
                        .HasColumnName("format")
                        .HasColumnType("integer");

                    b.HasKey("TournamentId", "Category", "Gender", "Format");

                    b.ToTable("tennis_events");
                });

            modelBuilder.Entity("JuniorTennis.Domain.Tournaments.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("AggregationMonth")
                        .HasColumnName("aggregation_month")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApplicationPeriod")
                        .HasColumnName("application_period")
                        .HasColumnType("text");

                    b.Property<int?>("EntryFee")
                        .HasColumnName("entry_fee")
                        .HasColumnType("integer");

                    b.Property<string>("HoldingPeriod")
                        .HasColumnName("holding_period")
                        .HasColumnType("text");

                    b.Property<int?>("MethodOfPayment")
                        .HasColumnName("method_of_payment")
                        .HasColumnType("integer");

                    b.Property<string>("Outline")
                        .HasColumnName("outline")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RegistrationYear")
                        .HasColumnName("registration_year")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TournamentEntryReceptionMailBody")
                        .HasColumnName("tournament_entry_reception_mail_body")
                        .HasColumnType("text");

                    b.Property<string>("TournamentEntryReceptionMailSubject")
                        .HasColumnName("tournament_entry_reception_mail_subject")
                        .HasColumnType("text");

                    b.Property<string>("TournamentName")
                        .HasColumnName("tournament_name")
                        .HasColumnType("text");

                    b.Property<int?>("TournamentType")
                        .HasColumnName("tournament_type")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfYear")
                        .HasColumnName("type_of_year")
                        .HasColumnType("integer");

                    b.Property<string>("Venue")
                        .HasColumnName("venue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tournaments");
                });

            modelBuilder.Entity("JuniorTennis.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "417f24ea-9092-41e4-bd9e-2945167af006",
                            ConcurrencyStamp = "2709c3bf-1f11-41bb-a665-490aa729b1f4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "64813896-1fe3-4c83-9833-9f7ceef245fb",
                            ConcurrencyStamp = "a8449c40-37fc-4e68-8d67-362c46f20d8d",
                            Name = "TournamentCreator",
                            NormalizedName = "TOURNAMENTCREATOR"
                        },
                        new
                        {
                            Id = "c47b40c0-0356-492f-9b36-e7ac7ad8fb38",
                            ConcurrencyStamp = "e8b7b25e-4205-4b60-a63b-a3f2fc19e6a1",
                            Name = "Recorder",
                            NormalizedName = "RECORDER"
                        },
                        new
                        {
                            Id = "6babcfe4-9d72-483d-bd55-41a8d30ec7da",
                            ConcurrencyStamp = "9f84eff4-8ac1-44a7-973a-d9891b1bf644",
                            Name = "Team",
                            NormalizedName = "TEAM"
                        },
                        new
                        {
                            Id = "8afc07f0-0e0f-41b0-93f8-b1328ed7bf5c",
                            ConcurrencyStamp = "166916d9-7e5b-4e65-b643-91c308fd8ef6",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        });
                });

            modelBuilder.Entity("JuniorTennis.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.Block", b =>
                {
                    b.HasOne("JuniorTennis.Domain.DrawTables.DrawSettings", "DrawSettings")
                        .WithMany()
                        .HasForeignKey("DrawSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Domain.DrawTables.DrawTable", "DrawTable")
                        .WithMany("Blocks")
                        .HasForeignKey("DrawTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.DrawTable", b =>
                {
                    b.HasOne("JuniorTennis.Domain.DrawTables.DrawSettings", "MainDrawSettings")
                        .WithMany()
                        .HasForeignKey("MainDrawSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Domain.DrawTables.DrawSettings", "QualifyingDrawSettings")
                        .WithMany()
                        .HasForeignKey("QualifyingDrawSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.Game", b =>
                {
                    b.HasOne("JuniorTennis.Domain.DrawTables.Block", "Block")
                        .WithMany("Games")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Domain.DrawTables.DrawSettings", "DrawSettings")
                        .WithMany()
                        .HasForeignKey("DrawSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.GameResult", b =>
                {
                    b.HasOne("JuniorTennis.Domain.DrawTables.Game", "Game")
                        .WithOne("GameResult")
                        .HasForeignKey("JuniorTennis.Domain.DrawTables.GameResult", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.DrawTables.Opponent", b =>
                {
                    b.HasOne("JuniorTennis.Domain.DrawTables.Game", "Game")
                        .WithMany("Opponents")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.Players.Player", b =>
                {
                    b.HasOne("JuniorTennis.Domain.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.RequestPlayers.RequestPlayer", b =>
                {
                    b.HasOne("JuniorTennis.Domain.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Domain.Seasons.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Domain.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.RequestTeams.RequestTeam", b =>
                {
                    b.HasOne("JuniorTennis.Domain.Seasons.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Domain.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.TournamentEntries.EntryDetail", b =>
                {
                    b.HasOne("JuniorTennis.Domain.DrawTables.DrawTable", "DrawTable")
                        .WithMany("EntryDetails")
                        .HasForeignKey("DrawTableId");

                    b.HasOne("JuniorTennis.Domain.TournamentEntries.TournamentEntry", "TournamentEntry")
                        .WithOne("EntryDetail")
                        .HasForeignKey("JuniorTennis.Domain.TournamentEntries.EntryDetail", "TournamentEntryId");
                });

            modelBuilder.Entity("JuniorTennis.Domain.TournamentEntries.EntryPlayer", b =>
                {
                    b.HasOne("JuniorTennis.Domain.TournamentEntries.EntryDetail", "EntryDetail")
                        .WithMany("EntryPlayers")
                        .HasForeignKey("EntryDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.Tournaments.HoldingDate", b =>
                {
                    b.HasOne("JuniorTennis.Domain.Tournaments.Tournament", "Tournament")
                        .WithMany("HoldingDates")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JuniorTennis.Domain.Tournaments.TennisEvent", b =>
                {
                    b.HasOne("JuniorTennis.Domain.Tournaments.Tournament", "Tournament")
                        .WithMany("TennisEvents")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("JuniorTennis.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JuniorTennis.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JuniorTennis.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("JuniorTennis.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JuniorTennis.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JuniorTennis.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
